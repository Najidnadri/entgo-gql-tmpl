package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"chipin/ent"
	"chipin/resolvers/generated"
	"context"

	"entgo.io/contrib/entgql"
	"github.com/google/uuid"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id uuid.UUID) (ent.Noder, error) {
	return r.client.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []uuid.UUID) ([]ent.Noder, error) {
	return r.client.Noders(ctx, ids)
}

// Payments is the resolver for the payments field.
func (r *queryResolver) Payments(ctx context.Context, after *entgql.Cursor[uuid.UUID], first *int, before *entgql.Cursor[uuid.UUID], last *int, orderBy []*ent.PaymentOrder, where *ent.PaymentWhereInput) (*ent.PaymentConnection, error) {
	// w, err := r.services.MarketService.FilterQuery(ctx, where)
	// if err != nil {
	// 	return nil, err
	// }

	// conn, err := r.client.Payment.Query().
	// 	Paginate(ctx, after, first, before, last,
	// 		ent.WithPaymentOrder(orderBy),
	// 		ent.WithPaymentFilter(w.Filter),
	// 	)
	// if err != nil {
	// 	return nil, err
	// }
	// return r.services.MarketService.FilterConnection(ctx, conn)

	return r.client.Payment.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithPaymentOrder(orderBy),
			ent.WithPaymentFilter(where.Filter),
		)
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
