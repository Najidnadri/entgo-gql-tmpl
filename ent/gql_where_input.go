// Code generated by ent, DO NOT EDIT.

package ent

import (
	"chipin/ent/payment"
	"chipin/ent/predicate"
	"errors"
	"fmt"
	"time"

	"github.com/google/uuid"
)

// PaymentWhereInput represents a where input for filtering Payment queries.
type PaymentWhereInput struct {
	Predicates []predicate.Payment  `json:"-"`
	Not        *PaymentWhereInput   `json:"not,omitempty"`
	Or         []*PaymentWhereInput `json:"or,omitempty"`
	And        []*PaymentWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "date_created" field predicates.
	DateCreated      *time.Time  `json:"dateCreated,omitempty"`
	DateCreatedNEQ   *time.Time  `json:"dateCreatedNEQ,omitempty"`
	DateCreatedIn    []time.Time `json:"dateCreatedIn,omitempty"`
	DateCreatedNotIn []time.Time `json:"dateCreatedNotIn,omitempty"`
	DateCreatedGT    *time.Time  `json:"dateCreatedGT,omitempty"`
	DateCreatedGTE   *time.Time  `json:"dateCreatedGTE,omitempty"`
	DateCreatedLT    *time.Time  `json:"dateCreatedLT,omitempty"`
	DateCreatedLTE   *time.Time  `json:"dateCreatedLTE,omitempty"`

	// "date_updated" field predicates.
	DateUpdated      *time.Time  `json:"dateUpdated,omitempty"`
	DateUpdatedNEQ   *time.Time  `json:"dateUpdatedNEQ,omitempty"`
	DateUpdatedIn    []time.Time `json:"dateUpdatedIn,omitempty"`
	DateUpdatedNotIn []time.Time `json:"dateUpdatedNotIn,omitempty"`
	DateUpdatedGT    *time.Time  `json:"dateUpdatedGT,omitempty"`
	DateUpdatedGTE   *time.Time  `json:"dateUpdatedGTE,omitempty"`
	DateUpdatedLT    *time.Time  `json:"dateUpdatedLT,omitempty"`
	DateUpdatedLTE   *time.Time  `json:"dateUpdatedLTE,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PaymentWhereInput) AddPredicates(predicates ...predicate.Payment) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PaymentWhereInput filter on the PaymentQuery builder.
func (i *PaymentWhereInput) Filter(q *PaymentQuery) (*PaymentQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPaymentWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPaymentWhereInput is returned in case the PaymentWhereInput is empty.
var ErrEmptyPaymentWhereInput = errors.New("ent: empty predicate PaymentWhereInput")

// P returns a predicate for filtering payments.
// An error is returned if the input is empty or invalid.
func (i *PaymentWhereInput) P() (predicate.Payment, error) {
	var predicates []predicate.Payment
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, payment.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Payment, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, payment.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Payment, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, payment.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, payment.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, payment.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, payment.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, payment.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, payment.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, payment.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, payment.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, payment.IDLTE(*i.IDLTE))
	}
	if i.DateCreated != nil {
		predicates = append(predicates, payment.DateCreatedEQ(*i.DateCreated))
	}
	if i.DateCreatedNEQ != nil {
		predicates = append(predicates, payment.DateCreatedNEQ(*i.DateCreatedNEQ))
	}
	if len(i.DateCreatedIn) > 0 {
		predicates = append(predicates, payment.DateCreatedIn(i.DateCreatedIn...))
	}
	if len(i.DateCreatedNotIn) > 0 {
		predicates = append(predicates, payment.DateCreatedNotIn(i.DateCreatedNotIn...))
	}
	if i.DateCreatedGT != nil {
		predicates = append(predicates, payment.DateCreatedGT(*i.DateCreatedGT))
	}
	if i.DateCreatedGTE != nil {
		predicates = append(predicates, payment.DateCreatedGTE(*i.DateCreatedGTE))
	}
	if i.DateCreatedLT != nil {
		predicates = append(predicates, payment.DateCreatedLT(*i.DateCreatedLT))
	}
	if i.DateCreatedLTE != nil {
		predicates = append(predicates, payment.DateCreatedLTE(*i.DateCreatedLTE))
	}
	if i.DateUpdated != nil {
		predicates = append(predicates, payment.DateUpdatedEQ(*i.DateUpdated))
	}
	if i.DateUpdatedNEQ != nil {
		predicates = append(predicates, payment.DateUpdatedNEQ(*i.DateUpdatedNEQ))
	}
	if len(i.DateUpdatedIn) > 0 {
		predicates = append(predicates, payment.DateUpdatedIn(i.DateUpdatedIn...))
	}
	if len(i.DateUpdatedNotIn) > 0 {
		predicates = append(predicates, payment.DateUpdatedNotIn(i.DateUpdatedNotIn...))
	}
	if i.DateUpdatedGT != nil {
		predicates = append(predicates, payment.DateUpdatedGT(*i.DateUpdatedGT))
	}
	if i.DateUpdatedGTE != nil {
		predicates = append(predicates, payment.DateUpdatedGTE(*i.DateUpdatedGTE))
	}
	if i.DateUpdatedLT != nil {
		predicates = append(predicates, payment.DateUpdatedLT(*i.DateUpdatedLT))
	}
	if i.DateUpdatedLTE != nil {
		predicates = append(predicates, payment.DateUpdatedLTE(*i.DateUpdatedLTE))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPaymentWhereInput
	case 1:
		return predicates[0], nil
	default:
		return payment.And(predicates...), nil
	}
}
