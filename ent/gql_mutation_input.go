// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

// CreatePaymentInput represents a mutation input for creating payments.
type CreatePaymentInput struct {
	DateCreated *time.Time
	DateUpdated *time.Time
}

// Mutate applies the CreatePaymentInput on the PaymentMutation builder.
func (i *CreatePaymentInput) Mutate(m *PaymentMutation) {
	if v := i.DateCreated; v != nil {
		m.SetDateCreated(*v)
	}
	if v := i.DateUpdated; v != nil {
		m.SetDateUpdated(*v)
	}
}

// SetInput applies the change-set in the CreatePaymentInput on the PaymentCreate builder.
func (c *PaymentCreate) SetInput(i CreatePaymentInput) *PaymentCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePaymentInput represents a mutation input for updating payments.
type UpdatePaymentInput struct {
	DateUpdated *time.Time
}

// Mutate applies the UpdatePaymentInput on the PaymentMutation builder.
func (i *UpdatePaymentInput) Mutate(m *PaymentMutation) {
	if v := i.DateUpdated; v != nil {
		m.SetDateUpdated(*v)
	}
}

// SetInput applies the change-set in the UpdatePaymentInput on the PaymentUpdate builder.
func (c *PaymentUpdate) SetInput(i UpdatePaymentInput) *PaymentUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePaymentInput on the PaymentUpdateOne builder.
func (c *PaymentUpdateOne) SetInput(i UpdatePaymentInput) *PaymentUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
